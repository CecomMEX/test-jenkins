name: CI/CD to EC2 via ECR & SSM

on:
  push:
    branches: [ main ]

# Evita despliegues solapados en main
concurrency:
  group: deploy-main
  cancel-in-progress: true

# Puedes mover estos a Variables/Secrets si prefieres
env:
  AWS_REGION: us-east-2
  ACCOUNT_ID: 825765398232
  ECR_REPOSITORY: nestjs-app
  APP_NAME: nestjs-app
  PORT: "3000"
  # Deja el ARN del Target Group como secret porque es más largo/engorroso
  TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image (unique tag + latest)
        id: build
        run: |
          set -euxo pipefail
          UNIQUE_TAG="build-${{ github.run_number }}"
          UNIQUE_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${UNIQUE_TAG}"
          LATEST_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"

          # Build con tag inmutable
          docker build -t "$UNIQUE_URI" .

          # Etiqueta también como latest
          docker tag "$UNIQUE_URI" "$LATEST_URI"

          echo "UNIQUE_URI=$UNIQUE_URI" >> $GITHUB_ENV
          echo "LATEST_URI=$LATEST_URI" >> $GITHUB_ENV
          echo "UNIQUE_TAG=$UNIQUE_TAG" >> $GITHUB_ENV

      - name: Push image (unique + latest)
        run: |
          set -euxo pipefail
          docker push "$UNIQUE_URI"
          docker push "$LATEST_URI"

      - name: Rolling deploy (ALB + SSM)
        run: |
          set -euxo pipefail

          # Obtén las instancias registradas en el Target Group
          TARGETS=$(aws elbv2 describe-target-health --target-group-arn "$TARGET_GROUP_ARN" \
                    --query "TargetHealthDescriptions[].Target.Id" --output text || true)

          if [ -z "$TARGETS" ]; then
            echo "No hay instancias registradas en el Target Group. Revisa el TG/ALB."
            exit 1
          fi

          COUNT=$(echo "$TARGETS" | wc -w | tr -d ' ')
          echo "Targets: $TARGETS (count=$COUNT)"
          
          # Usaremos el tag inmutable para desplegar exactamente lo que acabamos de construir
          IMAGE_TO_DEPLOY="$UNIQUE_URI"
          # Si prefieres siempre 'latest', usa: IMAGE_TO_DEPLOY="$LATEST_URI"

          for IID in $TARGETS; do
            if [ "$COUNT" -gt 1 ]; then
              echo ">> Deregister $IID"
              aws elbv2 deregister-targets --target-group-arn "$TARGET_GROUP_ARN" --targets Id=$IID
              aws elbv2 wait target-deregistered --target-group-arn "$TARGET_GROUP_ARN" --targets Id=$IID || true
            else
              echo ">> Solo 1 instancia: deploy in-place (sin deregister para evitar downtime)"
            fi

            echo ">> Update systemd unit & restart via SSM on $IID"
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --instance-ids "$IID" \
              --parameters commands="sed -i \"s|^Environment=IMAGE_URI=.*|Environment=IMAGE_URI=${IMAGE_TO_DEPLOY}|\" /etc/systemd/system/${APP_NAME}.service && systemctl daemon-reload && systemctl restart ${APP_NAME}.service" \
              --comment "Deploy ${IMAGE_TO_DEPLOY}" >/dev/null

            # Espera breve para que el servicio arranque antes del re-registro (útil con 1 instancia)
            sleep 5

            if [ "$COUNT" -gt 1 ]; then
              echo ">> Re-register $IID"
              aws elbv2 register-targets --target-group-arn "$TARGET_GROUP_ARN" --targets Id=$IID
              aws elbv2 wait target-in-service --target-group-arn "$TARGET_GROUP_ARN" --targets Id=$IID
            else
              echo ">> Con 1 instancia no hay re-registro. Verificando salud vía ALB..."
              # Si tu TG también apunta a esta misma instancia, puedes opcionalmente validarlo aquí.
              # sleep 10
            fi

            echo ">> $IID actualizado"
          done

      - name: Done
        run: echo "Deploy OK -> ${UNIQUE_URI}"
